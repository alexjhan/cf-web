"""
Fragmentaci√≥n Semi-Autom√°tica
Identifica art√≠culos autom√°ticamente pero permite ajustes manuales
"""

import json
import re

def auto_extract_articles(json_file_path: str):
    """Extrae art√≠culos autom√°ticamente"""
    
    with open(json_file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Juntar todo el texto
    full_text = ""
    for item in data['content']:
        text = item['text'].strip()
        if text:
            full_text += " " + text
    
    # Buscar art√≠culos con regex
    article_pattern = r'(Art√≠culo\s+\d+[¬∞¬∫]?[^.]*?\.(?:[^.]*\.)*?)(?=Art√≠culo\s+\d+[¬∞¬∫]?|$)'
    articles = re.findall(article_pattern, full_text, re.DOTALL | re.IGNORECASE)
    
    chunks = []
    for i, article in enumerate(articles):
        article = article.strip()
        if len(article) > 50:  # Filtrar art√≠culos muy cortos
            
            # Extraer n√∫mero de art√≠culo
            match = re.match(r'Art√≠culo\s+(\d+)[¬∞¬∫]?', article, re.IGNORECASE)
            article_num = match.group(1) if match else str(i+1)
            
            chunk = {
                "id": f"article_{article_num}",
                "title": f"Art√≠culo {article_num}¬∞",
                "type": "article",
                "content": article,
                "word_count": len(article.split())
            }
            chunks.append(chunk)
    
    return chunks

def create_editable_template(chunks: list, output_file: str):
    """Crea plantilla editable con art√≠culos pre-identificados"""
    
    template = """# FRAGMENTACI√ìN SEMI-AUTOM√ÅTICA - ART√çCULOS IDENTIFICADOS

## INSTRUCCIONES:
1. Revisa cada art√≠culo identificado autom√°ticamente
2. Ajusta el contenido si es necesario
3. Agrega chunks adicionales (cap√≠tulos, secciones) al final
4. Mant√©n el formato ---CHUNK_START--- / ---CHUNK_END---

## ART√çCULOS IDENTIFICADOS:

"""
    
    for chunk in chunks:
        template += f"""---CHUNK_START---
T√çTULO: {chunk['title']}
TIPO: {chunk['type']}
CONTENIDO:
{chunk['content']}
---CHUNK_END---

"""
    
    template += """
## AGREGA AQU√ç CHUNKS ADICIONALES (CAP√çTULOS, T√çTULOS, ETC.):

---CHUNK_START---
T√çTULO: [T√≠tulo del chunk adicional]
TIPO: [chapter/title/section]
CONTENIDO:
[Contenido aqu√≠]
---CHUNK_END---

"""
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(template)

def main():
    """Generar fragmentaci√≥n semi-autom√°tica"""
    
    json_file = "../data_ingest/output/EstatutoUniversitario_UNSAAC_processed.json"
    
    print("üîÑ Identificando art√≠culos autom√°ticamente...")
    chunks = auto_extract_articles(json_file)
    
    output_file = "manual_chunking/estatuto_semi_auto.txt"
    create_editable_template(chunks, output_file)
    
    print(f"‚úÖ Plantilla semi-autom√°tica creada: {output_file}")
    print(f"üìä Art√≠culos identificados: {len(chunks)}")
    print(f"\nüìã Primeros art√≠culos:")
    for chunk in chunks[:5]:
        print(f"  - {chunk['title']} ({chunk['word_count']} palabras)")
    
    print(f"\nüìù SIGUIENTE PASO:")
    print(f"1. Edita: {output_file}")
    print(f"2. Ajusta art√≠culos si es necesario")
    print(f"3. Agrega cap√≠tulos/t√≠tulos al final")
    print(f"4. Ejecuta: python convert_manual_chunks.py")

if __name__ == "__main__":
    main()
